import pygame
import math
import random
import sys

pygame.init()

# Screen setup
WIDTH, HEIGHT = 1280, 720
HALF_HEIGHT = HEIGHT // 2
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("3D Zombie Shooter")

# Colors
BLACK = (0, 0, 0)
RED = (200, 0, 0)
GRAY = (100, 100, 100)
DARK_GRAY = (50, 50, 50)
WHITE = (255, 255, 255)
GREEN = (0, 200, 0)

# Map layout (1 = wall, 0 = empty space)
world_map = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
]

# Player setup
player_x = 5.0
player_y = 5.0
player_angle = 0.0
FOV = math.pi / 3
MAX_DEPTH = 20
MOVE_SPEED = 0.15  # Faster movement speed
ROT_SPEED = 0.04
health = 100
camera_sensitivity = 1.0  # New sensitivity multiplier

# Enemies (Zombies)
zombies = []
for _ in range(5):
    zx = random.randint(2, 8)
    zy = random.randint(2, 8)
    zombies.append({'x': zx, 'y': zy, 'alive': True})

# On-screen buttons
button_size = 100
margin = 20
left_button = pygame.Rect(margin, HEIGHT - button_size - margin, button_size, button_size)
right_button = pygame.Rect(margin + button_size + margin, HEIGHT - button_size - margin, button_size, button_size)
up_button = pygame.Rect(WIDTH - button_size * 2 - margin * 2, HEIGHT - button_size - margin, button_size, button_size)
down_button = pygame.Rect(WIDTH - button_size - margin, HEIGHT - button_size - margin, button_size, button_size)
shoot_button = pygame.Rect(WIDTH//2 - 60, HEIGHT - button_size - margin, 120, button_size)
settings_button = pygame.Rect(WIDTH - 120, 20, 100, 50)

# Load gun image with hand from external storage
gun_with_hand_image = pygame.image.load('/storage/emulated/0/gun_with_hand.png').convert_alpha()

# Function to draw buttons
def draw_buttons():
    pygame.draw.rect(screen, DARK_GRAY, left_button)
    pygame.draw.rect(screen, DARK_GRAY, right_button)
    pygame.draw.rect(screen, DARK_GRAY, up_button)
    pygame.draw.rect(screen, DARK_GRAY, down_button)
    pygame.draw.rect(screen, RED, shoot_button)
    pygame.draw.rect(screen, DARK_GRAY, settings_button)

    font = pygame.font.SysFont(None, 36)
    screen.blit(font.render("◀", True, WHITE), (left_button.x + 30, left_button.y + 30))
    screen.blit(font.render("▶", True, WHITE), (right_button.x + 30, right_button.y + 30))
    screen.blit(font.render("▲", True, WHITE), (up_button.x + 30, up_button.y + 30))
    screen.blit(font.render("▼", True, WHITE), (down_button.x + 30, down_button.y + 30))
    screen.blit(font.render("FIRE", True, WHITE), (shoot_button.x + 20, shoot_button.y + 30))
    screen.blit(font.render("SET", True, WHITE), (settings_button.x + 20, settings_button.y + 10))

# Function to cast rays and display 3D world
def cast_rays():
    for ray in range(WIDTH):
        ray_angle = (player_angle - FOV / 2.0) + (ray / WIDTH) * FOV
        distance_to_wall = 0
        hit_wall = False

        eye_x = math.sin(ray_angle)
        eye_y = math.cos(ray_angle)

        while not hit_wall and distance_to_wall < MAX_DEPTH:
            distance_to_wall += 0.1
            test_x = int(player_x + eye_x * distance_to_wall)
            test_y = int(player_y + eye_y * distance_to_wall)

            if test_x < 0 or test_x >= len(world_map[0]) or test_y < 0 or test_y >= len(world_map):
                hit_wall = True
                distance_to_wall = MAX_DEPTH
            else:
                if world_map[test_y][test_x] == 1:
                    hit_wall = True

        ceiling = int(HALF_HEIGHT - HEIGHT / distance_to_wall)
        floor = HEIGHT - ceiling

        color = 255 - int(distance_to_wall * 12)
        if color < 0:
            color = 0
        wall_color = (color, color, color)

        pygame.draw.line(screen, wall_color, (ray, ceiling), (ray, floor))
        pygame.draw.line(screen, DARK_GRAY, (ray, floor), (ray, HEIGHT))

# Function to draw gun image with hand
def draw_gun_with_hand():
    gun_x = WIDTH // 2 - gun_with_hand_image.get_width() // 2
    gun_y = HEIGHT - gun_with_hand_image.get_height() - 10
    screen.blit(gun_with_hand_image, (gun_x, gun_y))

# Show settings menu
def show_settings_menu():
    global camera_sensitivity
    settings_running = True
    while settings_running:
        screen.fill(BLACK)
        font = pygame.font.SysFont(None, 48)
        text = font.render(f"Camera Sensitivity: {camera_sensitivity:.2f}", True, WHITE)
        screen.blit(text, (WIDTH//2 - 200, HEIGHT//2 - 50))

        increase_button = pygame.Rect(WIDTH//2 + 100, HEIGHT//2 - 50, 50, 50)
        decrease_button = pygame.Rect(WIDTH//2 - 150, HEIGHT//2 - 50, 50, 50)
        exit_button = pygame.Rect(WIDTH//2 - 50, HEIGHT//2 + 50, 100, 50)

        pygame.draw.rect(screen, DARK_GRAY, increase_button)
        pygame.draw.rect(screen, DARK_GRAY, decrease_button)
        pygame.draw.rect(screen, DARK_GRAY, exit_button)

        screen.blit(font.render("+", True, WHITE), (increase_button.x + 10, increase_button.y))
        screen.blit(font.render("-", True, WHITE), (decrease_button.x + 10, decrease_button.y))
        screen.blit(font.render("Exit", True, WHITE), (exit_button.x + 10, exit_button.y + 10))

        pygame.display.flip()

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

            if event.type == pygame.MOUSEBUTTONDOWN:
                if increase_button.collidepoint(event.pos):
                    camera_sensitivity += 0.1
                if decrease_button.collidepoint(event.pos):
                    camera_sensitivity = max(0.1, camera_sensitivity - 0.1)
                if exit_button.collidepoint(event.pos):
                    settings_running = False

# Main game loop
def game_loop():
    global player_x, player_y, player_angle, health, camera_sensitivity

    running = True
    clock = pygame.time.Clock()  # For controlling frame rate
    while running:
        screen.fill(BLACK)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

        touch_pos = pygame.mouse.get_pos()
        pressed = pygame.mouse.get_pressed()

        if pressed[0]:
            if left_button.collidepoint(touch_pos):
                player_angle -= ROT_SPEED * camera_sensitivity
            if right_button.collidepoint(touch_pos):
                player_angle += ROT_SPEED * camera_sensitivity
            if up_button.collidepoint(touch_pos):
                new_x = player_x + math.sin(player_angle) * MOVE_SPEED
                new_y = player_y + math.cos(player_angle) * MOVE_SPEED
                if world_map[int(new_y)][int(new_x)] == 0:
                    player_x = new_x
                    player_y = new_y
            if down_button.collidepoint(touch_pos):
                new_x = player_x - math.sin(player_angle) * MOVE_SPEED
                new_y = player_y - math.cos(player_angle) * MOVE_SPEED
                if world_map[int(new_y)][int(new_x)] == 0:
                    player_x = new_x
                    player_y = new_y
            if shoot_button.collidepoint(touch_pos):
                pass  # Shooting action goes here
            if settings_button.collidepoint(touch_pos):
                show_settings_menu()

        # Draw scene
        cast_rays()
        draw_gun_with_hand()  # Draw gun with hand image
        draw_buttons()

        # Draw health
        font = pygame.font.SysFont(None, 48)
        health_text = font.render(f'Health: {int(health)}', True, WHITE)
        screen.blit(health_text, (20, 20))

        pygame.display.flip()

        clock.tick(60)  # Limit to 60 FPS for smoother performance

game_loop()
